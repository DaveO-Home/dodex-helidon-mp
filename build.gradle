import org.apache.tools.ant.filters.ReplaceTokens
import org.codehaus.groovy.runtime.GStringImpl

/*
 * Copyright (c) 2018, 2023 Oracle and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
    id 'org.kordamp.gradle.jandex' version '1.1.0'
    id 'application'
    id "pmd"
}

version = '1.0.0'
jandex {
    version = '3.1.5'
}
def doOnChange = ".${File.separator}gradlew classes"
def watchForChange = "src/main/java/**/*.java, src/main/resources/**/*"
def debug = ""
def cache = "--java-opts=-D"
def OS = System.getProperty("os.name").toLowerCase()
def usr = System.getProperty("user.home")

description = """dodex-helidon-mp"""

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

ext {
    helidonversion = "4.0.1"
    mainClass = "dmo.fs.server.DodexMain"
}

repositories {
    mavenCentral()
    mavenLocal()
    gradlePluginPortal()
}

dependencies {
    implementation enforcedPlatform("io.helidon:helidon-dependencies:${project.helidonversion}")
    annotationProcessor("org.hibernate.orm:hibernate-jpamodelgen:6.3.1.Final")
    implementation 'io.helidon.microprofile.bundles:helidon-microprofile-core'
    implementation "io.helidon.common:helidon-common:${project.helidonversion}"
    implementation "io.helidon.logging:helidon-logging-common:${project.helidonversion}"
    implementation "io.helidon.logging:helidon-logging-jul:${project.helidonversion}"

    implementation group: 'io.helidon.webserver', name: 'helidon-webserver', version: "${project.helidonversion}"
    implementation "jakarta.json.bind:jakarta.json.bind-api"
    implementation "org.glassfish.jersey.media:jersey-media-json-binding"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3"

    implementation "io.helidon.integrations.cdi:helidon-integrations-cdi-hibernate:${project.helidonversion}"
    implementation "io.helidon.integrations.cdi:helidon-integrations-cdi-datasource-hikaricp:${project.helidonversion}"
    implementation "io.helidon.integrations.cdi:helidon-integrations-cdi-jta-weld:${project.helidonversion}"
    implementation "io.helidon.integrations.cdi:helidon-integrations-cdi-jpa:${project.helidonversion}"
    implementation "io.helidon.microprofile.websocket:helidon-microprofile-websocket:${project.helidonversion}"

    implementation 'com.h2database:h2:2.2.224'
    implementation 'org.postgresql:postgresql:42.7.0'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.1'
    implementation "com.oracle.database.jdbc:ojdbc11:23.3.0.23.09"
    implementation "com.microsoft.sqlserver:mssql-jdbc:12.4.2.jre11"
    implementation group: "com.ibm.db2", name: "jcc", version: "11.5.9.0"
    implementation "jakarta.annotation:jakarta.annotation-api"
    implementation "jakarta.enterprise:jakarta.enterprise.cdi-api"
    implementation "jakarta.inject:jakarta.inject-api"
    implementation "jakarta.ws.rs:jakarta.ws.rs-api"
    implementation "jakarta.persistence:jakarta.persistence-api"
    implementation "jakarta.transaction:jakarta.transaction-api"
    implementation "io.helidon.common:helidon-common:${project.helidonversion}"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api"

    implementation "org.hibernate.validator:hibernate-validator"
    implementation "org.glassfish:jakarta.el"
    implementation "io.helidon.microprofile:helidon-microprofile-cors:${project.helidonversion}"
    runtimeOnly "jakarta.activation:jakarta.activation-api"

    implementation "io.helidon.microprofile.openapi:helidon-microprofile-openapi:${project.helidonversion}"
    runtimeOnly "io.helidon.integrations.openapi-ui:helidon-integrations-openapi-ui:${project.helidonversion}"
    runtimeOnly "org.eclipse.microprofile.openapi:microprofile-openapi-api:3.1.1"
    runtimeOnly "io.smallrye:smallrye-open-api-ui"

    implementation "io.helidon.microprofile:helidon-microprofile-security:${project.helidonversion}"
    implementation "io.helidon.common:helidon-common-reactive:${project.helidonversion}"


//    implementation "io.helidon.microprofile.bundles:helidon-microprofile:${project.helidonversion}"
//    implementation "org.eclipse.microprofile.metrics:microprofile-metrics-api:${project.helidonversion}"
//    implementation "io.helidon.integrations.micrometer:helidon-integrations-micrometer-cdi:${project.helidonversion}"

    implementation "org.eclipse.microprofile.config:microprofile-config-api:${project.helidonversion}"


    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.slf4j:slf4j-api:2.0.9'
    implementation 'org.slf4j:slf4j-simple:2.0.9'

    runtimeOnly 'jakarta.activation:jakarta.activation-api'

    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'io.helidon.microprofile.testing:helidon-microprofile-testing-junit5:4.0.0'
    testImplementation 'io.helidon.microprofile.tests:helidon-microprofile-tests-junit5:4.0.0-M2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.2")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation group: 'io.helidon.webserver.testing.junit5', name: 'helidon-webserver-testing-junit5', version: '4.0.0'
    testImplementation group: 'io.helidon.common.testing', name: 'helidon-common-testing-junit5', version: '4.0.0'
    testImplementation group: 'io.helidon.microprofile.testing', name: 'helidon-microprofile-testing-junit5', version: '4.0.0'
    testImplementation group: 'io.helidon.common.testing', name: 'helidon-common-testing-http-junit5', version: '4.0.0'
    implementation group: 'io.helidon.webclient', name: 'helidon-webclient-websocket', version: '4.0.0'


//    testImplementation group: 'io.helidon.webclient', name: 'helidon-webclient', version: '4.0.0'
//    implementation group: 'io.helidon.webclient', name: 'helidon-webclient-api', version: '4.0.0'
//    implementation group: 'io.helidon.webclient', name: 'helidon-webclient-http2', version: '4.0.0'
//    implementation group: 'io.helidon.webclient', name: 'helidon-webclient-http1', version: '4.0.0'


}

/*  Changing persistence-unit dynamically

    This will work if the line in "dmo/fs/db/fac/DbConfiguration.java" is changed to String pu = "@pu@". And
    you either "export PU="somedefinedPUunit" or -DPU="somedefinedPUunit" (System Property). The default is "h2dev".
    In development, "helidon dev" will not work with the pu = "@pu@", it uses pom.xml.
    Uncomment the "changePU" task and "dependsOn" below to implement.
    Note: In development, Helidon does not support "live-reload" using gradle, "helidon dev" will "live-reload".
*/
//tasks.register('changePU', Copy) {
//    doFirst {
//        sourceSets {
//            main {
//                java {
//                    srcDir 'src'
//                    exclude 'test/**'
//                    exclude getLayout().getProjectDirectory().toString() + '/src/main/java/dmo/fs/db/fac/DbConfiguration.java'
//                }
//            }
//        }
//    }
//    from 'src/main/java/dmo/fs/db/fac'
//    into getLayout().getBuildDirectory().dir("generated/java/dmo/fs/db/fac")
//    def pue = System.getenv("PU")
//    def pup = System.getProperty("PU")
//    def tokenProperties = new Properties()
//    def pu = "h2dev"
//    if (pup != null) pu = pup else if (pue != null) pu = pue
//    tokenProperties.put("pu", pu)
//    filter(ReplaceTokens, tokens: tokenProperties)
//    sourceSets.main.java.srcDir getLayout().getBuildDirectory().dir("generated/java/dmo/fs/db/fac")
//}
//compileJava.dependsOn 'changePU'

run {
    if (System.getProperty("DEBUG", "false") == "true") {
        debug = "--java-opts=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -Dvertx.disableFileCaching=true"
        cache = ""
    }

    environment("MODE", "dev")
    args = ['run', "${project.mainClass}", debug, cache]
}

test {
    mainClass = "${project.mainClass}"
    useJUnitPlatform()
    // Use junit platform for unit tests
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }
}

// define a custom task to copy all dependencies in the runtime classpath
// into build/libs/libs
// uses built-in Copy
tasks.register('copyLibs', Copy) {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    from configurations.runtimeClasspath
    into 'build/libs/libs'
}

// add it as a dependency of built-in task 'assemble'
copyLibs.dependsOn jar
assemble.dependsOn copyLibs

// default jar configuration
// set the main classpath
// add each jar under build/libs/libs into the classpath
distTar {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
distZip {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
}
compileJava {
    options.deprecation = true
}
jar {
  duplicatesStrategy DuplicatesStrategy.EXCLUDE
  archiveFileName = "${project.name}.jar"
  manifest {
    attributes ('Main-Class': "${project.mainClass}" ,
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/$it.name" }.join(' ')
               )
  }
  dependsOn "jandex"
}

application {
    mainClass = "${project.mainClass}"
}

// This is a work-around for running unit tests.
// Gradle places resource files under ${buildDir}/resources. In order for
// beans.xml to get picked up by CDI it must be co-located with the classes.
// So we move it before running tests.
// In either case it ends up AOK in the final jar artifact
tasks.register('moveBeansXML') {
    doLast {
        if("$System.env.MODE" == "dev") {
            ant.copy file: getLayout().getBuildDirectory().get().toString() + "/resources/main/META-INF/beans.xml",
                    todir: getLayout().getBuildDirectory().get().toString() + "/classes/java/main/META-INF"
        } else {
            ant.move file: getLayout().getBuildDirectory().get().toString() + "/resources/main/META-INF/beans.xml",
                    todir: getLayout().getBuildDirectory().get().toString() + "/classes/java/main/META-INF"
        }
    }
}
pmd {
    ruleSetFiles = files("dodexstart.xml")
    ruleSets = []
    ignoreFailures = true
    // gradle not ready for PMD 7 with jdk21 (ClassNotFoundException: net.sourceforge.pmd.ant.PMDTask)
    toolVersion = "6.55.0" // 7.0.0-rc4
    consoleOutput = false
}

pmdMain {
    dependsOn "jandex"
}
pmdTest {
    dependsOn "jandex"
}
compileTestJava.dependsOn "jandex"
test.dependsOn moveBeansXML
run.dependsOn moveBeansXML, "jandex"
